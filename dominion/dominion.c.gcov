        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void *a, const void *b)
        -:    9:{
 24175000:   10:  if (*(int *)a > *(int *)b)
   150000:   11:    return 1;
 24025000:   12:  if (*(int *)a < *(int *)b)
  8575000:   13:    return -1;
 15450000:   14:  return 0;
 24175000:   15:}
        -:   16:
        -:   17:struct gameState *newGame()
        -:   18:{
        3:   19:  struct gameState *g = malloc(sizeof(struct gameState));
        3:   20:  return g;
        -:   21:}
        -:   22:
        -:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
        -:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
   700000:   48:  SelectStream(1);
   700000:   49:  PutSeed((long)randomSeed);
        -:   50:
        -:   51:  //check number of players
  1400000:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   53:  {
   200000:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
   500000:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
 11000000:   61:  for (i = 0; i < 10; i++)
        -:   62:  {
110000000:   63:    for (j = 0; j < 10; j++)
        -:   64:    {
 95000000:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
 50000000:   69:    }
  5000000:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
   500000:   76:  if (numPlayers == 2)
        -:   77:  {
   100000:   78:    state->supplyCount[curse] = 10;
   100000:   79:  }
   400000:   80:  else if (numPlayers == 3)
        -:   81:  {
   100000:   82:    state->supplyCount[curse] = 20;
   100000:   83:  }
        -:   84:  else
        -:   85:  {
   300000:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
   500000:   90:  if (numPlayers == 2)
        -:   91:  {
   100000:   92:    state->supplyCount[estate] = 8;
   100000:   93:    state->supplyCount[duchy] = 8;
   100000:   94:    state->supplyCount[province] = 8;
   100000:   95:  }
        -:   96:  else
        -:   97:  {
   400000:   98:    state->supplyCount[estate] = 12;
   400000:   99:    state->supplyCount[duchy] = 12;
   400000:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
   500000:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
   500000:  105:  state->supplyCount[silver] = 40;
   500000:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
 21000000:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
        -:  110:  {
165000000:  111:    for (j = 0; j < 10; j++) //loop chosen cards
        -:  112:    {
 77500000:  113:      if (kingdomCards[j] == i)
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
  9500000:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:        {
  1000000:  118:          if (numPlayers == 2)
        -:  119:          {
   200000:  120:            state->supplyCount[i] = 8;
   200000:  121:          }
        -:  122:          else
        -:  123:          {
   800000:  124:            state->supplyCount[i] = 12;
        -:  125:          }
  1000000:  126:        }
        -:  127:        else
        -:  128:        {
  4000000:  129:          state->supplyCount[i] = 10;
        -:  130:        }
  5000000:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
 72500000:  135:        state->supplyCount[i] = -1;
        -:  136:      }
 72500000:  137:    }
 10000000:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
  4400000:  144:  for (i = 0; i < numPlayers; i++)
        -:  145:  {
  1700000:  146:    state->deckCount[i] = 0;
 13600000:  147:    for (j = 0; j < 3; j++)
        -:  148:    {
  5100000:  149:      state->deck[i][j] = estate;
  5100000:  150:      state->deckCount[i]++;
  5100000:  151:    }
 27200000:  152:    for (j = 3; j < 10; j++)
        -:  153:    {
 11900000:  154:      state->deck[i][j] = copper;
 11900000:  155:      state->deckCount[i]++;
 11900000:  156:    }
  1700000:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
  4400000:  160:  for (i = 0; i < numPlayers; i++)
        -:  161:  {
  1700000:  162:    if (shuffle(i, state) < 0)
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
  1700000:  166:  }
        -:  167:
        -:  168:  //draw player hands
  4400000:  169:  for (i = 0; i < numPlayers; i++)
        -:  170:  {
        -:  171:    //initialize hand size to zero
  1700000:  172:    state->handCount[i] = 0;
  1700000:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
  1700000:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
 28000000:  182:  for (i = 0; i <= treasure_map; i++)
        -:  183:  {
 13500000:  184:    state->embargoTokens[i] = 0;
 13500000:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
   500000:  188:  state->outpostPlayed = 0;
   500000:  189:  state->phase = 0;
   500000:  190:  state->numActions = 1;
   500000:  191:  state->numBuys = 1;
   500000:  192:  state->playedCardCount = 0;
   500000:  193:  state->whoseTurn = 0;
   500000:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
  6000000:  198:  for (it = 0; it < 5; it++)
        -:  199:  {
  2500000:  200:    drawCard(state->whoseTurn, state);
  2500000:  201:  }
        -:  202:
   500000:  203:  updateCoins(state->whoseTurn, state, 0);
        -:  204:
   500000:  205:  return 0;
   700000:  206:}
        -:  207:
        -:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
  1775000:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
  1775000:  216:  if (state->deckCount[player] < 1)
    #####:  217:    return -1;
  1775000:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
 38150000:  221:  while (state->deckCount[player] > 0)
        -:  222:  {
 17300000:  223:    card = floor(Random() * state->deckCount[player]);
 17300000:  224:    newDeck[newDeckPos] = state->deck[player][card];
 17300000:  225:    newDeckPos++;
107050000:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
        -:  227:    {
 36225000:  228:      state->deck[player][i] = state->deck[player][i + 1];
 36225000:  229:    }
 17300000:  230:    state->deckCount[player]--;
        -:  231:  }
 38150000:  232:  for (i = 0; i < newDeckPos; i++)
        -:  233:  {
 17300000:  234:    state->deck[player][i] = newDeck[i];
 17300000:  235:    state->deckCount[player]++;
 17300000:  236:  }
        -:  237:
  1775000:  238:  return 0;
  1775000:  239:}
        -:  240:
        -:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  278:
    #####:  279:  return 0;
    #####:  280:}
        -:  281:
        -:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
    #####:  292:  who = state->whoseTurn;
        -:  293:
    #####:  294:  if (state->numBuys < 1)
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
    #####:  300:  else if (supplyCount(supplyPos, state) < 1)
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
    #####:  304:    return -1;
        -:  305:  }
    #####:  306:  else if (state->coins < getCost(supplyPos))
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
    #####:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
    #####:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  317:
    #####:  318:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
    #####:  327:  return 0;
    #####:  328:}
        -:  329:
        -:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
        -:  333:}
        -:  334:
        -:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
        -:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
    #####:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
        -:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
    #####:  354:      count++;
    #####:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
    #####:  360:      count++;
    #####:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
    #####:  366:      count++;
    #####:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
        -:  372:int whoseTurn(struct gameState *state)
        -:  373:{
    #####:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
        -:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
    #####:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
    #####:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
    #####:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
        -:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
        -:  438:    {
    #####:  439:      j++;
    #####:  440:    }
    #####:  441:  }
    #####:  442:  if (j >= 3)
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
    #####:  448:}
        -:  449:
        -:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
    #####:  454:  int score = 0;
        -:  455:  //score from hand
    #####:  456:  for (i = 0; i < state->handCount[player]; i++)
        -:  457:  {
    #####:  458:    if (state->hand[player][i] == curse)
        -:  459:    {
    #####:  460:      score = score - 1;
    #####:  461:    };
    #####:  462:    if (state->hand[player][i] == estate)
        -:  463:    {
    #####:  464:      score = score + 1;
    #####:  465:    };
    #####:  466:    if (state->hand[player][i] == duchy)
        -:  467:    {
    #####:  468:      score = score + 3;
    #####:  469:    };
    #####:  470:    if (state->hand[player][i] == province)
        -:  471:    {
    #####:  472:      score = score + 6;
    #####:  473:    };
    #####:  474:    if (state->hand[player][i] == great_hall)
        -:  475:    {
    #####:  476:      score = score + 1;
    #####:  477:    };
    #####:  478:    if (state->hand[player][i] == gardens)
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  481:    };
    #####:  482:  }
        -:  483:
        -:  484:  //score from discard
    #####:  485:  for (i = 0; i < state->discardCount[player]; i++)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
        -:  488:    {
    #####:  489:      score = score - 1;
    #####:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
        -:  492:    {
    #####:  493:      score = score + 1;
    #####:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
        -:  496:    {
    #####:  497:      score = score + 3;
    #####:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
        -:  500:    {
    #####:  501:      score = score + 6;
    #####:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
        -:  504:    {
    #####:  505:      score = score + 1;
    #####:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  510:    };
    #####:  511:  }
        -:  512:
        -:  513:  //score from deck
    #####:  514:  for (i = 0; i < state->discardCount[player]; i++)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
        -:  517:    {
    #####:  518:      score = score - 1;
    #####:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
        -:  521:    {
    #####:  522:      score = score + 1;
    #####:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
        -:  525:    {
    #####:  526:      score = score + 3;
    #####:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
        -:  529:    {
    #####:  530:      score = score + 6;
    #####:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
        -:  533:    {
    #####:  534:      score = score + 1;
    #####:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
    #####:  539:    };
    #####:  540:  }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
        -:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
        -:  557:    {
    #####:  558:      players[i] = -9999;
    #####:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
        -:  563:    }
    #####:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
        -:  571:    {
    #####:  572:      j = i;
    #####:  573:    }
    #####:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
        -:  582:    {
    #####:  583:      players[i]++;
    #####:  584:    }
    #####:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
        -:  592:    {
    #####:  593:      j = i;
    #####:  594:    }
    #####:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
        -:  602:    {
    #####:  603:      players[i] = 1;
    #####:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
    #####:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
        -:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
  4000000:  618:  if (state->deckCount[player] <= 0)
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
   750000:  624:    for (i = 0; i < state->discardCount[player]; i++)
        -:  625:    {
   300000:  626:      state->deck[player][i] = state->discard[player][i];
   300000:  627:      state->discard[player][i] = -1;
   300000:  628:    }
        -:  629:
    75000:  630:    state->deckCount[player] = state->discardCount[player];
    75000:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
    75000:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
    75000:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
    75000:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
    75000:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
    75000:  653:    if (deckCounter == 0)
    #####:  654:      return -1;
        -:  655:
    75000:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
    75000:  657:    state->deckCount[player]--;
    75000:  658:    state->handCount[player]++; //Increment hand count
    75000:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
  3925000:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
  3925000:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
  3925000:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
  3925000:  672:    state->deckCount[player]--;
  3925000:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
  4000000:  676:  return 0;
  4000000:  677:}
        -:  678:
        -:  679:int getCost(int cardNumber)
        -:  680:{
    #####:  681:  switch (cardNumber)
        -:  682:  {
        -:  683:  case curse:
    #####:  684:    return 0;
        -:  685:  case estate:
    #####:  686:    return 2;
        -:  687:  case duchy:
    #####:  688:    return 5;
        -:  689:  case province:
    #####:  690:    return 8;
        -:  691:  case copper:
    #####:  692:    return 0;
        -:  693:  case silver:
    #####:  694:    return 3;
        -:  695:  case gold:
    #####:  696:    return 6;
        -:  697:  case adventurer:
    #####:  698:    return 6;
        -:  699:  case council_room:
    #####:  700:    return 5;
        -:  701:  case feast:
    #####:  702:    return 4;
        -:  703:  case gardens:
    #####:  704:    return 4;
        -:  705:  case mine:
    #####:  706:    return 5;
        -:  707:  case remodel:
    #####:  708:    return 4;
        -:  709:  case smithy:
    #####:  710:    return 4;
        -:  711:  case village:
    #####:  712:    return 3;
        -:  713:  case baron:
    #####:  714:    return 4;
        -:  715:  case great_hall:
    #####:  716:    return 3;
        -:  717:  case minion:
    #####:  718:    return 5;
        -:  719:  case steward:
    #####:  720:    return 3;
        -:  721:  case tribute:
    #####:  722:    return 5;
        -:  723:  case ambassador:
    #####:  724:    return 3;
        -:  725:  case cutpurse:
    #####:  726:    return 4;
        -:  727:  case embargo:
    #####:  728:    return 2;
        -:  729:  case outpost:
    #####:  730:    return 5;
        -:  731:  case salvager:
    #####:  732:    return 4;
        -:  733:  case sea_hag:
    #####:  734:    return 4;
        -:  735:  case treasure_map:
    #####:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
    #####:  740:}
        -:  741:
        -:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
    #####:  749:  int currentPlayer = whoseTurn(state);
    #####:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
    #####:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND]; // moved above the if statement
    #####:  754:  int drawntreasure = 0;
        -:  755:  int cardDrawn;
    #####:  756:  int z = 0; // this is the counter for the temp hand
    #####:  757:  if (nextPlayer > (state->numPlayers - 1))
        -:  758:  {
    #####:  759:    nextPlayer = 0;
    #####:  760:  }
        -:  761:
        -:  762:  //uses switch to select card and perform actions
    #####:  763:  switch (card)
        -:  764:  {
        -:  765:  case adventurer:
    #####:  766:  Adventurer(state, currentPlayer,drawntreasure);
        -:  767:
        -:  768:    
        -:  769:    // while (drawntreasure < 2)
        -:  770:    // {
        -:  771:    //   if (state->deckCount[currentPlayer] < 1)
        -:  772:    //   { //if the deck is empty we need to shuffle discard and add to deck
        -:  773:    //     shuffle(currentPlayer, state);
        -:  774:    //   }
        -:  775:    //   drawCard(currentPlayer, state);
        -:  776:    //   cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
        -:  777:    //   if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  778:    //     drawntreasure++;
        -:  779:    //   else
        -:  780:    //   {
        -:  781:    //     temphand[z] = cardDrawn;
        -:  782:    //     state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  783:    //     z++;
        -:  784:    //   }
        -:  785:    // }
        -:  786:    // while (z - 1 >= 0)
        -:  787:    // {
        -:  788:    //   state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
        -:  789:    //   z = z - 1;
        -:  790:    // }
    #####:  791:    return 0;
        -:  792:
        -:  793:  case council_room:
        -:  794:    //+4 Cards
    #####:  795:    for (i = 0; i < 4; i++)
        -:  796:    {
    #####:  797:      drawCard(currentPlayer, state);
    #####:  798:    }
        -:  799:
        -:  800:    //+1 Buy
    #####:  801:    state->numBuys++;
        -:  802:
        -:  803:    //Each other player draws a card
    #####:  804:    for (i = 0; i < state->numPlayers; i++)
        -:  805:    {
    #####:  806:      if (i != currentPlayer)
        -:  807:      {
    #####:  808:        drawCard(i, state);
    #####:  809:      }
    #####:  810:    }
        -:  811:
        -:  812:    //put played card in played card pile
    #####:  813:    discardCard(handPos, currentPlayer, state, 0);
        -:  814:
    #####:  815:    return 0;
        -:  816:
        -:  817:  case feast:
        -:  818:    //gain card with cost up to 5
        -:  819:    //Backup hand
    #####:  820:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  821:    {
    #####:  822:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  823:      state->hand[currentPlayer][i] = -1;          //Set to nothing
    #####:  824:    }
        -:  825:    //Backup hand
        -:  826:
        -:  827:    //Update Coins for Buy
    #####:  828:    updateCoins(currentPlayer, state, 5);
    #####:  829:    x = 1; //Condition to loop on
    #####:  830:    while (x == 1)
        -:  831:    { //Buy one card
    #####:  832:      if (supplyCount(choice1, state) <= 0)
        -:  833:      {
        -:  834:        if (DEBUG)
        -:  835:          printf("None of that card left, sorry!\n");
        -:  836:
        -:  837:        if (DEBUG)
        -:  838:        {
        -:  839:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  840:        }
    #####:  841:      }
    #####:  842:      else if (state->coins < getCost(choice1))
        -:  843:      {
    #####:  844:        printf("That card is too expensive!\n");
        -:  845:
        -:  846:        if (DEBUG)
        -:  847:        {
        -:  848:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  849:        }
    #####:  850:      }
        -:  851:      else
        -:  852:      {
        -:  853:
        -:  854:        if (DEBUG)
        -:  855:        {
        -:  856:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:        }
        -:  858:
    #####:  859:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
    #####:  860:        x = 0;                                      //No more buying cards
        -:  861:
        -:  862:        if (DEBUG)
        -:  863:        {
        -:  864:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  865:        }
        -:  866:      }
        -:  867:    }
        -:  868:
        -:  869:    //Reset Hand
    #####:  870:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  871:    {
    #####:  872:      state->hand[currentPlayer][i] = temphand[i];
    #####:  873:      temphand[i] = -1;
    #####:  874:    }
        -:  875:    //Reset Hand
        -:  876:
    #####:  877:    return 0;
        -:  878:
        -:  879:  case gardens:
    #####:  880:    return -1;
        -:  881:
        -:  882:  case mine:
    #####:  883:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  884:
    #####:  885:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  886:    {
    #####:  887:      return -1;
        -:  888:    }
        -:  889:
    #####:  890:    if (choice2 > treasure_map || choice2 < curse)
        -:  891:    {
    #####:  892:      return -1;
        -:  893:    }
        -:  894:
    #####:  895:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
        -:  896:    {
    #####:  897:      return -1;
        -:  898:    }
        -:  899:
    #####:  900:    gainCard(choice2, state, 2, currentPlayer);
        -:  901:
        -:  902:    //discard card from hand
    #####:  903:    discardCard(handPos, currentPlayer, state, 0);
        -:  904:
        -:  905:    //discard trashed card
    #####:  906:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  907:    {
    #####:  908:      if (state->hand[currentPlayer][i] == j)
        -:  909:      {
    #####:  910:        discardCard(i, currentPlayer, state, 0);
    #####:  911:        break;
        -:  912:      }
    #####:  913:    }
        -:  914:
    #####:  915:    return 0;
        -:  916:
        -:  917:  case remodel:
    #####:  918:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  919:
    #####:  920:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
        -:  921:    {
    #####:  922:      return -1;
        -:  923:    }
        -:  924:
    #####:  925:    gainCard(choice2, state, 0, currentPlayer);
        -:  926:
        -:  927:    //discard card from hand
    #####:  928:    discardCard(handPos, currentPlayer, state, 0);
        -:  929:
        -:  930:    //discard trashed card
    #####:  931:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  932:    {
    #####:  933:      if (state->hand[currentPlayer][i] == j)
        -:  934:      {
    #####:  935:        discardCard(i, currentPlayer, state, 0);
    #####:  936:        break;
        -:  937:      }
    #####:  938:    }
        -:  939:
    #####:  940:    return 0;
        -:  941:
        -:  942:  case smithy:
        -:  943:
    #####:  944:  Smithy(currentPlayer, state,handPos);
        -:  945:    // //+3 Cards
        -:  946:    // for (i = 0; i < 3; i++)
        -:  947:    // {
        -:  948:    //   drawCard(currentPlayer, state);
        -:  949:    // }
        -:  950:
        -:  951:    // //discard card from hand
        -:  952:    // discardCard(handPos, currentPlayer, state, 0);
    #####:  953:    return 0;
        -:  954:
        -:  955:  case village:
        -:  956:
    #####:  957:  Village(currentPlayer, state, handPos);
        -:  958:    // //+1 Card
        -:  959:    // drawCard(currentPlayer, state);
        -:  960:
        -:  961:    // //+2 Actions
        -:  962:    // state->numActions = state->numActions + 2;
        -:  963:
        -:  964:    // //discard played card from hand
        -:  965:    // discardCard(handPos, currentPlayer, state, 0);
    #####:  966:    return 0;
        -:  967:
        -:  968:  case baron:
    #####:  969:    state->numBuys++; //Increase buys by 1!
    #####:  970:    if (choice1 > 0)
        -:  971:    {                             //Boolean true or going to discard an estate
    #####:  972:      int p = 0;                  //Iterator for hand!
    #####:  973:      int card_not_discarded = 1; //Flag for discard set!
    #####:  974:      while (card_not_discarded)
        -:  975:      {
    #####:  976:        if (state->hand[currentPlayer][p] == estate)
        -:  977:        {                    //Found an estate card!
    #####:  978:          state->coins += 4; //Add 4 coins to the amount of coins
    #####:  979:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  980:          state->discardCount[currentPlayer]++;
    #####:  981:          for (; p < state->handCount[currentPlayer]; p++)
        -:  982:          {
    #####:  983:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
    #####:  984:          }
    #####:  985:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  986:          state->handCount[currentPlayer]--;
    #####:  987:          card_not_discarded = 0; //Exit the loop
    #####:  988:        }
    #####:  989:        else if (p > state->handCount[currentPlayer])
        -:  990:        {
        -:  991:          if (DEBUG)
        -:  992:          {
        -:  993:            printf("No estate cards in your hand, invalid choice\n");
        -:  994:            printf("Must gain an estate if there are any\n");
        -:  995:          }
    #####:  996:          if (supplyCount(estate, state) > 0)
        -:  997:          {
    #####:  998:            gainCard(estate, state, 0, currentPlayer);
    #####:  999:            state->supplyCount[estate]--; //Decrement estates
    #####: 1000:            if (supplyCount(estate, state) == 0)
        -: 1001:            {
    #####: 1002:              isGameOver(state);
    #####: 1003:            }
    #####: 1004:          }
    #####: 1005:          card_not_discarded = 0; //Exit the loop
    #####: 1006:        }
        -: 1007:
        -: 1008:        else
        -: 1009:        {
    #####: 1010:          p++; //Next card
        -: 1011:        }
        -: 1012:      }
    #####: 1013:    }
        -: 1014:
        -: 1015:    else
        -: 1016:    {
    #####: 1017:      if (supplyCount(estate, state) > 0)
        -: 1018:      {
    #####: 1019:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1020:        state->supplyCount[estate]--;              //Decrement Estates
    #####: 1021:        if (supplyCount(estate, state) == 0)
        -: 1022:        {
    #####: 1023:          isGameOver(state);
    #####: 1024:        }
    #####: 1025:      }
        -: 1026:    }
        -: 1027:
    #####: 1028:    return 0;
        -: 1029:
        -: 1030:  case great_hall:
        -: 1031:    //+1 Card
    #####: 1032:    drawCard(currentPlayer, state);
        -: 1033:
        -: 1034:    //+1 Actions
    #####: 1035:    state->numActions++;
        -: 1036:
        -: 1037:    //discard card from hand
    #####: 1038:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1039:    return 0;
        -: 1040:
        -: 1041:  case minion:
        -: 1042:    //+1 action
    #####: 1043:    state->numActions++;
        -: 1044:
        -: 1045:    //discard card from hand
    #####: 1046:    discardCard(handPos, currentPlayer, state, 0);
        -: 1047:
    #####: 1048:    if (choice1) //+2 coins
        -: 1049:    {
    #####: 1050:      state->coins = state->coins + 2;
    #####: 1051:    }
        -: 1052:
    #####: 1053:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1054:    {
        -: 1055:      //discard hand
    #####: 1056:      while (numHandCards(state) > 0)
        -: 1057:      {
    #####: 1058:        discardCard(handPos, currentPlayer, state, 0);
        -: 1059:      }
        -: 1060:
        -: 1061:      //draw 4
    #####: 1062:      for (i = 0; i < 4; i++)
        -: 1063:      {
    #####: 1064:        drawCard(currentPlayer, state);
    #####: 1065:      }
        -: 1066:
        -: 1067:      //other players discard hand and redraw if hand size > 4
    #####: 1068:      for (i = 0; i < state->numPlayers; i++)
        -: 1069:      {
    #####: 1070:        if (i != currentPlayer)
        -: 1071:        {
    #####: 1072:          if (state->handCount[i] > 4)
        -: 1073:          {
        -: 1074:            //discard hand
    #####: 1075:            while (state->handCount[i] > 0)
        -: 1076:            {
    #####: 1077:              discardCard(handPos, i, state, 0);
        -: 1078:            }
        -: 1079:
        -: 1080:            //draw 4
    #####: 1081:            for (j = 0; j < 4; j++)
        -: 1082:            {
    #####: 1083:              drawCard(i, state);
    #####: 1084:            }
    #####: 1085:          }
    #####: 1086:        }
    #####: 1087:      }
    #####: 1088:    }
    #####: 1089:    return 0;
        -: 1090:
        -: 1091:  case steward:
        -: 1092:
    #####: 1093:    Steward(choice1, currentPlayer,state, handPos, choice2, choice3);
        -: 1094:    // if (choice1 == 1)
        -: 1095:    // {
        -: 1096:    //   //+2 cards
        -: 1097:    //   drawCard(currentPlayer, state);
        -: 1098:    //   drawCard(currentPlayer, state);
        -: 1099:    // }
        -: 1100:    // else if (choice1 == 2)
        -: 1101:    // {
        -: 1102:    //   //+2 coins
        -: 1103:    //   state->coins = state->coins + 2;
        -: 1104:    // }
        -: 1105:    // else
        -: 1106:    // {
        -: 1107:    //   //trash 2 cards in hand
        -: 1108:    //   discardCard(choice2, currentPlayer, state, 1);
        -: 1109:    //   discardCard(choice3, currentPlayer, state, 1);
        -: 1110:    // }
        -: 1111:
        -: 1112:    // //discard card from hand
        -: 1113:    // discardCard(handPos, currentPlayer, state, 0);
    #####: 1114:    return 0;
        -: 1115:
        -: 1116:  case tribute:
    #####: 1117:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -: 1118:    {
    #####: 1119:      if (state->deckCount[nextPlayer] > 0)
        -: 1120:      {
    #####: 1121:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1122:        state->deckCount[nextPlayer]--;
    #####: 1123:      }
    #####: 1124:      else if (state->discardCount[nextPlayer] > 0)
        -: 1125:      {
    #####: 1126:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1127:        state->discardCount[nextPlayer]--;
    #####: 1128:      }
        -: 1129:      else
        -: 1130:      {
        -: 1131:        //No Card to Reveal
        -: 1132:        if (DEBUG)
        -: 1133:        {
        -: 1134:          printf("No cards to reveal\n");
        -: 1135:        }
        -: 1136:      }
    #####: 1137:    }
        -: 1138:
        -: 1139:    else
        -: 1140:    {
    #####: 1141:      if (state->deckCount[nextPlayer] == 0)
        -: 1142:      {
    #####: 1143:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
        -: 1144:        {
    #####: 1145:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1146:          state->deckCount[nextPlayer]++;
    #####: 1147:          state->discard[nextPlayer][i] = -1;
    #####: 1148:          state->discardCount[nextPlayer]--;
    #####: 1149:        }
        -: 1150:
    #####: 1151:        shuffle(nextPlayer, state); //Shuffle the deck
    #####: 1152:      }
    #####: 1153:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1154:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1155:      state->deckCount[nextPlayer]--;
    #####: 1156:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1157:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1158:      state->deckCount[nextPlayer]--;
        -: 1159:    }
        -: 1160:
    #####: 1161:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
        -: 1162:    { //If we have a duplicate card, just drop one
    #####: 1163:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1164:      state->playedCardCount++;
    #####: 1165:      tributeRevealedCards[1] = -1;
    #####: 1166:    }
        -: 1167:
    #####: 1168:    for (i = 0; i <= 2; i++)
        -: 1169:    {
    #####: 1170:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
        -: 1171:      { //Treasure cards
    #####: 1172:        state->coins += 2;
    #####: 1173:      }
        -: 1174:
    #####: 1175:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
        -: 1176:      { //Victory Card Found
    #####: 1177:        drawCard(currentPlayer, state);
    #####: 1178:        drawCard(currentPlayer, state);
    #####: 1179:      }
        -: 1180:      else
        -: 1181:      { //Action Card
    #####: 1182:        state->numActions = state->numActions + 2;
        -: 1183:      }
    #####: 1184:    }
        -: 1185:
    #####: 1186:    return 0;
        -: 1187:
        -: 1188:  case ambassador:
    #####: 1189:    j = 0; //used to check if player has enough cards to discard
        -: 1190:
    #####: 1191:    if (choice2 > 2 || choice2 < 0)
        -: 1192:    {
    #####: 1193:      return -1;
        -: 1194:    }
        -: 1195:
    #####: 1196:    if (choice1 == handPos)
        -: 1197:    {
    #####: 1198:      return -1;
        -: 1199:    }
        -: 1200:
    #####: 1201:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1202:    {
    #####: 1203:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1204:      {
    #####: 1205:        j++;
    #####: 1206:      }
    #####: 1207:    }
    #####: 1208:    if (j < choice2)
        -: 1209:    {
    #####: 1210:      return -1;
        -: 1211:    }
        -: 1212:
        -: 1213:    if (DEBUG)
        -: 1214:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1215:
        -: 1216:    //increase supply count for choosen card by amount being discarded
    #####: 1217:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1218:
        -: 1219:    //each other player gains a copy of revealed card
    #####: 1220:    for (i = 0; i < state->numPlayers; i++)
        -: 1221:    {
    #####: 1222:      if (i != currentPlayer)
        -: 1223:      {
    #####: 1224:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1225:      }
    #####: 1226:    }
        -: 1227:
        -: 1228:    //discard played card from hand
    #####: 1229:    discardCard(handPos, currentPlayer, state, 0);
        -: 1230:
        -: 1231:    //trash copies of cards returned to supply
    #####: 1232:    for (j = 0; j < choice2; j++)
        -: 1233:    {
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1235:      {
    #####: 1236:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1237:        {
    #####: 1238:          discardCard(i, currentPlayer, state, 1);
    #####: 1239:          break;
        -: 1240:        }
    #####: 1241:      }
    #####: 1242:    }
        -: 1243:
    #####: 1244:    return 0;
        -: 1245:
        -: 1246:  case cutpurse:
        -: 1247:
    #####: 1248:    updateCoins(currentPlayer, state, 2);
    #####: 1249:    for (i = 0; i < state->numPlayers; i++)
        -: 1250:    {
    #####: 1251:      if (i != currentPlayer)
        -: 1252:      {
    #####: 1253:        for (j = 0; j < state->handCount[i]; j++)
        -: 1254:        {
    #####: 1255:          if (state->hand[i][j] == copper)
        -: 1256:          {
    #####: 1257:            discardCard(j, i, state, 0);
    #####: 1258:            break;
        -: 1259:          }
    #####: 1260:          if (j == state->handCount[i])
        -: 1261:          {
    #####: 1262:            for (k = 0; k < state->handCount[i]; k++)
        -: 1263:            {
        -: 1264:              if (DEBUG)
        -: 1265:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1266:            }
    #####: 1267:            break;
        -: 1268:          }
    #####: 1269:        }
    #####: 1270:      }
    #####: 1271:    }
        -: 1272:
        -: 1273:    //discard played card from hand
    #####: 1274:    discardCard(handPos, currentPlayer, state, 0);
        -: 1275:
    #####: 1276:    return 0;
        -: 1277:
        -: 1278:  case embargo:
        -: 1279:    
    #####: 1280:    return 0;
        -: 1281:
        -: 1282:  case outpost:
        -: 1283:
    #####: 1284:  Outpost(state, handPos, currentPlayer);
        -: 1285:    // //set outpost flag
        -: 1286:    // state->outpostPlayed++;
        -: 1287:
        -: 1288:    // //discard card
        -: 1289:    // discardCard(handPos, currentPlayer, state, 0);
    #####: 1290:    return 0;
        -: 1291:
        -: 1292:  case salvager:
        -: 1293:    //+1 buy
    #####: 1294:    state->numBuys++;
        -: 1295:
    #####: 1296:    if (choice1)
        -: 1297:    {
        -: 1298:      //gain coins equal to trashed card
    #####: 1299:      state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1300:      //trash card
    #####: 1301:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1302:    }
        -: 1303:
        -: 1304:    //discard card
    #####: 1305:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1306:    return 0;
        -: 1307:
        -: 1308:  case sea_hag:
    #####: 1309:    for (i = 0; i < state->numPlayers; i++)
        -: 1310:    {
    #####: 1311:      if (i != currentPlayer)
        -: 1312:      {
    #####: 1313:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1314:        state->deckCount[i]--;
    #####: 1315:        state->discardCount[i]++;
    #####: 1316:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
    #####: 1317:      }
    #####: 1318:    }
    #####: 1319:    return 0;
        -: 1320:
        -: 1321:  case treasure_map:
        -: 1322:    //search hand for another treasure_map
    #####: 1323:    index = -1;
    #####: 1324:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1325:    {
    #####: 1326:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1327:      {
    #####: 1328:        index = i;
    #####: 1329:        break;
        -: 1330:      }
    #####: 1331:    }
    #####: 1332:    if (index > -1)
        -: 1333:    {
        -: 1334:      //trash both treasure cards
    #####: 1335:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1336:      discardCard(index, currentPlayer, state, 1);
        -: 1337:
        -: 1338:      //gain 4 Gold cards
    #####: 1339:      for (i = 0; i < 4; i++)
        -: 1340:      {
    #####: 1341:        gainCard(gold, state, 1, currentPlayer);
    #####: 1342:      }
        -: 1343:
        -: 1344:      //return success
    #####: 1345:      return 1;
        -: 1346:    }
        -: 1347:
        -: 1348:    //no second treasure_map found in hand
    #####: 1349:    return -1;
        -: 1350:  }
        -: 1351:
    #####: 1352:  return -1;
    #####: 1353:}
        -: 1354:
        -: 1355:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1356:{
        -: 1357:
        -: 1358:  //if card is not trashed, added to Played pile
  1000000: 1359:  if (trashFlag < 1)
        -: 1360:  {
        -: 1361:    //add card to played pile
   500000: 1362:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
   500000: 1363:    state->playedCardCount++;
   500000: 1364:  }
        -: 1365:
        -: 1366:  //set played card to -1
  1000000: 1367:  state->hand[currentPlayer][handPos] = -1;
        -: 1368:
        -: 1369:  //remove card from player's hand
  1000000: 1370:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
        -: 1371:  {
        -: 1372:    //reduce number of cards in hand
   200000: 1373:    state->handCount[currentPlayer]--;
   200000: 1374:  }
   800000: 1375:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
        -: 1376:  {
        -: 1377:    //reduce number of cards in hand
   100000: 1378:    state->handCount[currentPlayer]--;
   100000: 1379:  }
        -: 1380:  else
        -: 1381:  {
        -: 1382:    //replace discarded card with last card in hand
   700000: 1383:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1384:    //set last card to -1
   700000: 1385:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1386:    //reduce number of cards in hand
   700000: 1387:    state->handCount[currentPlayer]--;
        -: 1388:  }
        -: 1389:
  1000000: 1390:  return 0;
        -: 1391:}
        -: 1392:
        -: 1393:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1394:{
        -: 1395:  //Note: supplyPos is enum of choosen card
        -: 1396:
        -: 1397:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1398:  if (supplyCount(supplyPos, state) < 1)
        -: 1399:  {
    #####: 1400:    return -1;
        -: 1401:  }
        -: 1402:
        -: 1403:  //added card for [whoseTurn] current player:
        -: 1404:  // toFlag = 0 : add to discard
        -: 1405:  // toFlag = 1 : add to deck
        -: 1406:  // toFlag = 2 : add to hand
        -: 1407:
    #####: 1408:  if (toFlag == 1)
        -: 1409:  {
    #####: 1410:    state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1411:    state->deckCount[player]++;
    #####: 1412:  }
    #####: 1413:  else if (toFlag == 2)
        -: 1414:  {
    #####: 1415:    state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1416:    state->handCount[player]++;
    #####: 1417:  }
        -: 1418:  else
        -: 1419:  {
    #####: 1420:    state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1421:    state->discardCount[player]++;
        -: 1422:  }
        -: 1423:
        -: 1424:  //decrease number in supply pile
    #####: 1425:  state->supplyCount[supplyPos]--;
        -: 1426:
    #####: 1427:  return 0;
    #####: 1428:}
        -: 1429:
        -: 1430:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1431:{
        -: 1432:  int i;
        -: 1433:
        -: 1434:  //reset coin count
   500000: 1435:  state->coins = 0;
        -: 1436:
        -: 1437:  //add coins for each Treasure card in player's hand
  6000000: 1438:  for (i = 0; i < state->handCount[player]; i++)
        -: 1439:  {
  2500000: 1440:    if (state->hand[player][i] == copper)
        -: 1441:    {
  2000000: 1442:      state->coins += 1;
  2000000: 1443:    }
   500000: 1444:    else if (state->hand[player][i] == silver)
        -: 1445:    {
    #####: 1446:      state->coins += 2;
    #####: 1447:    }
   500000: 1448:    else if (state->hand[player][i] == gold)
        -: 1449:    {
    #####: 1450:      state->coins += 3;
    #####: 1451:    }
  2500000: 1452:  }
        -: 1453:
        -: 1454:  //add bonus
   500000: 1455:  state->coins += bonus;
        -: 1456:
   500000: 1457:  return 0;
        -: 1458:}
        -: 1459:
        -: 1460://///////////////////////////////////////////////
        -: 1461:// Refactoring switch statements to functions
        -: 1462:void Smithy(int currentPlayer, struct gameState *state, int handPos){
        -: 1463:     //+3 Cards
  4000000: 1464:    for (int i = 0; i < 3; i++)
        -: 1465:    {
  1500000: 1466:      drawCard(currentPlayer, state);
  1500000: 1467:    }
        -: 1468:
        -: 1469:    //discard card from hand
   500000: 1470:    discardCard(handPos, currentPlayer, state, 0);
   500000: 1471:}
        -: 1472:
        -: 1473:void Village(int currentPlayer, struct gameState *state, int handPos){
        -: 1474:    //+1 Card
    #####: 1475:    drawCard(currentPlayer, state);
        -: 1476:
        -: 1477:    //+2 Actions
    #####: 1478:    state->numActions = state->numActions + 2;
        -: 1479:
        -: 1480:    //discard played card from hand
    #####: 1481:    discardCard(handPos, currentPlayer, state, 0);    
        -: 1482:
    #####: 1483:}
        -: 1484:
        -: 1485:void Steward(int choice1, int currentPlayer, struct gameState *state, int handPos, int choice2, int choice3){
    #####: 1486:    if (choice1 == 1)
        -: 1487:    {
        -: 1488:      //+2 cards
    #####: 1489:      drawCard(currentPlayer, state);
    #####: 1490:      drawCard(currentPlayer, state);
    #####: 1491:    }
    #####: 1492:    else if (choice1 == 2)
        -: 1493:    {
        -: 1494:      //+2 coins
    #####: 1495:      state->coins = state->coins + 4;
    #####: 1496:    }
        -: 1497:    else
        -: 1498:    {
        -: 1499:      //trash 2 cards in hand
    #####: 1500:      discardCard(choice2, currentPlayer, state, 1);
    #####: 1501:      discardCard(choice3, currentPlayer, state, 1);
        -: 1502:    }
        -: 1503:
        -: 1504:    //discard card from hand
    #####: 1505:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1506:}
        -: 1507:
        -: 1508:void Outpost(struct gameState *state, int handPos, int currentPlayer){
        -: 1509:  //set outpost flag
   500000: 1510:    state->outpostPlayed++;
        -: 1511:
        -: 1512:    //discard card
   500000: 1513:    discardCard(handPos, currentPlayer, state, 1);
        -: 1514:
   500000: 1515:}
        -: 1516:
        -: 1517:void Adventurer(struct gameState *state, int currentPlayer, int drawntreasure){
        -: 1518:  int temphand[MAX_HAND];
   500000: 1519:  int z = 0;
  1000000: 1520:   while (drawntreasure < 2)
        -: 1521:    {
    #####: 1522:      if (state->deckCount[currentPlayer] < 1)
        -: 1523:      { //if the deck is empty we need to shuffle discard and add to deck
    #####: 1524:        shuffle(currentPlayer, state);
    #####: 1525:      }
    #####: 1526:      drawCard(currentPlayer, state);
    #####: 1527:      int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    #####: 1528:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1529:        drawntreasure++;
        -: 1530:      else
        -: 1531:      {
    #####: 1532:        temphand[z] = cardDrawn;
    #####: 1533:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1534:        z--;
        -: 1535:      }
        -: 1536:    }
  1000000: 1537:    while (z - 1 >= 0)
        -: 1538:    {
    #####: 1539:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1540:      z = z - 1;
        -: 1541:    } 
   500000: 1542:} 
        -: 1543:
        -: 1544://end of dominion.c
